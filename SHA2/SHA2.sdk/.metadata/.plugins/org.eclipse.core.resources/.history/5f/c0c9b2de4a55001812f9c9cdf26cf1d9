/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xstatus.h"
#include "xintc_l.h"
#include "xil_exception.h"
#include "xparameters.h"
#include "sha256IPCoProcessor.h"

 int digest[8];
 int state, iter0, iter1;
 int w1, w2, w3, w4, w5;
int main()
{
    init_platform();

    print("\n\n\n\n\nHello World\n\r");

    int i;
    for(i = 0; i< 100 ; i++){
        digest[0] = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 0);
        digest[1] = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 4);
        digest[2] = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 8);
        digest[3] = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 12);
        digest[4] = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 16);
        digest[5] = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 20);
        digest[6] = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 24);
        digest[7] = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 28);
        state = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 32);
        iter0 = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 36);
        iter1 = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 40);
        w1 = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 44);
        w2 = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 48);
        w3 = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 52);
        w4 = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 56);
        w5 = SHA256IPCOPROCESSOR_mReadReg(XPAR_SHA256IPCOPROCESSOR_0_S00_AXI_BASEADDR, 60);

        xil_printf("%08x ", digest[0]);
        xil_printf("%08x ", digest[1]);
        xil_printf("%08x ", digest[2]);
        xil_printf("%08x ", digest[3]);
        xil_printf("%08x ", digest[4]);
        xil_printf("%08x ", digest[5]);
        xil_printf("%08x ", digest[6]);
        xil_printf("%08x\r\n", digest[7]);

        xil_printf("STATE: %08x\r\n", state);
        xil_printf("ITER0: %d\r\n", iter0);
        xil_printf("ITER1: %d\r\n", iter1);

        xil_printf("W(0): %08x\r\n", w1);
        xil_printf("W(12): %08x\r\n", w2);
        xil_printf("W(36): %08x\r\n", w3);
        xil_printf("W(42): %08x\r\n", w4);
        xil_printf("W(63): %08x\r\n", w5);
    }
    cleanup_platform();
    return 0;
}
