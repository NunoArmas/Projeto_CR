/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xio.h"

#define INTC_BASEADDR			XPAR_INTC_0_BASEADDR
#define INTC_DEVICE_ID			XPAR_INTC_0_DEVICE_ID
#define FIT_TIMER_0_INT_ID		XPAR_AXI_INTC_0_FIT_TIMER_0_INTERRUPT_INTR
#define FIT_TIMER_0_INT_MASK	XPAR_FIT_TIMER_0_INTERRUPT_MASK
#define PUSH_BUT_INT_ID			XPAR_AXI_INTC_0_AXI_GPIO_PUSH_BUT_IP2INTC_IRPT_INTR
#define PUSH_BUT_INT_MASK		XPAR_AXI_GPIO_PUSH_BUT_IP2INTC_IRPT_MASK

// Counter static variable
static unsigned int userCount = 0;

// BCD to segments conversion LUT
unsigned char disp7SegMapTable[10] = {0x40, 0x79, 0x24, 0x30, 0x19,
									  0x12, 0x02, 0x78, 0x00, 0x10};


void TimerIntCallbackHandler(void *CallbackRef) // Will be called at every timer output event
{
	static int irqCount = 0;

	irqCount++;
	if (irqCount == 500)
	{
		irqCount = 0;
		userCount = (userCount + 1) % 100; // Incremented once every 500 interrupts
	}

	static int refFlag = 0;
	unsigned int digit;
	unsigned int enableMask;

	switch (refFlag)  // Refresh the units or the tenths displays at 500 Hz (each)
	{
		case 0 :
		{
			digit = userCount % 10;
			enableMask = 0xFE;
			refFlag = 1;
			break;
		}
		case 1 :
		{
			digit = userCount / 10;
			enableMask = 0xFD;
			refFlag = 0;
			break;
		}
	}

	XGpio_WriteReg(XPAR_AXI_GPIO_7seg_disp_BASEADDR, XGPIO_DATA_OFFSET, enableMask);
	XGpio_WriteReg(XPAR_AXI_GPIO_DISP_SEG_BASEADDR, XGPIO_DATA_OFFSET, disp7SegMapTable[digit]);
}

int main()
{
    init_platform();

    print("Hello World\n\r");

    cleanup_platform();
    return 0;
}
